;;; emacs-qle.el --- Major mode for editing QLE log files -*- lexical-binding: t; -*-

;;; Commentary:
;; emacs-qle-mode is a major mode for working with Quick Log Entry (.qle) files.
;; It supports automatic file prompting, side-by-side windows,
;; live updating of a read-only contact buffer, and a minor mode
;; for live contact logging with features like auto-save on RET.

;;; Code:

(require 'cl-lib)

;; ----------------------------------------
;; Helper functions
;; ----------------------------------------

(defun emacs-qle--maybe-switch-to-qle-file ()
  "Prompt to open a .qle file if the current buffer isn't visiting one.
Returns t if we should continue loading the mode."
  (if (and (buffer-file-name)
           (string-suffix-p ".qle" (buffer-file-name) t))
      t
    (let ((file (read-file-name "Open QLE file: " nil nil t nil
                                (lambda (f) (string-suffix-p ".qle" f t)))))
      (find-file file)
      nil)))

(defun emacs-qle--setup-windows ()
  "Split the window and set up the contacts display."
  (let ((right (get-buffer-create "*QLE Contacts*")))
    ;; Left window is the current file buffer
    (delete-other-windows)
    (split-window-right)
    ;; Switch to right and show contacts
    (other-window 1)
    (switch-to-buffer right)
    (read-only-mode 1)
    ;; Return to the left (original file buffer)
    (other-window -1)))

(defun emacs-qle--update-contacts-buffer ()
  "Refresh the contents of the contacts buffer from the current file, skipping empty lines."
  (let ((file buffer-file-name)
        (contacts-buffer (get-buffer-create "*QLE Contacts*")))
    (when (and file (file-readable-p file))
      (with-temp-buffer
        (insert-file-contents file)
        (let ((lines (split-string (buffer-string) "\n"))
              (filtered-lines '()))
          (dolist (line lines)
            (unless (string-match-p "^\\s-*$" line)
              (push line filtered-lines)))
          (setq filtered-lines (nreverse filtered-lines))
          (with-current-buffer contacts-buffer
            (let ((inhibit-read-only t))
              (erase-buffer)
              (insert (string-join filtered-lines "\n"))
              (goto-char (point-min))
              (read-only-mode 1))))))))

(defun emacs-qle--on-save ()
  "Hook to update contact buffer after saving."
  (when (derived-mode-p 'emacs-qle-mode)
    (emacs-qle--update-contacts-buffer)))

(defun emacs-qle-newline-and-save ()
  "Insert a newline and save the buffer."
  (interactive)
  (newline)
  (save-buffer))

(defun emacs-qle-insert-date ()
  "Insert the current date at point in YYYYMMDD format."
  (interactive)
  (insert (format-time-string "%Y%m%d")))

(defun emacs-qle-insert-utc-time ()
  "Insert the current UTC time in HHMM format."
  (interactive)
  (insert (format-time-string "%H%M" (current-time) t)))

(defun emacs-qle-live-mode-insert-date-time-and-newline ()
  "Insert the UTC date and time at the start of the line, then create a newline.
Also save the file after insertion."
  (interactive)
  (beginning-of-line)  ; Move to the start of the line
  (insert (format-time-string "%Y%m%d %H%M " (current-time) t))  ; Insert date and time with space between
  (newline)            ; Insert a newline
  (save-buffer))       ; Save the file

;; ----------------------------------------
;; Minor mode: emacs-qle-live-mode
;; ----------------------------------------

(defvar emacs-qle-live-mode-map
  :keymap (let ((map (make-sparse-keymap)))
            (define-key map (kbd "RET") #'emacs-qle-live-mode-insert-date-time-and-newline)  ; Use the updated function
            map)
  "Keymap for `emacs-qle-live-mode`.")

(define-minor-mode emacs-qle-live-mode
  "Minor mode for live contact logging in QLE files."
  :lighter " Live"
  :keymap emacs-qle-live-mode-map
  :group 'emacs-qle
  (if emacs-qle-live-mode
      (message "Live mode enabled")
    (message "Live mode disabled")))

;; ----------------------------------------
;; Major mode: emacs-qle-mode
;; ----------------------------------------

(defvar emacs-qle-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "RET") #'emacs-qle-newline-and-save)
    (define-key map (kbd "C-i d") #'emacs-qle-insert-date)
    (define-key map (kbd "C-i t") #'emacs-qle-insert-utc-time)
    map)
  "Keymap for `emacs-qle-mode`.")

;;;###autoload
(define-derived-mode emacs-qle-mode fundamental-mode "emacs-qle"
  "Major mode for editing QLE log files."
  (use-local-map emacs-qle-mode-map)
  (when (emacs-qle--maybe-switch-to-qle-file)
    (switch-to-buffer (current-buffer))
    (emacs-qle--setup-windows)
    (emacs-qle--update-contacts-buffer)))

(add-hook 'emacs-qle-mode-hook
          (lambda ()
            (add-hook 'after-save-hook #'emacs-qle--on-save nil t)))

;;;###autoload
(add-to-list 'auto-mode-alist '("\\.qle\\'" . emacs-qle-mode))

(provide 'emacs-qle)

;;; emacs-qle.el ends here
